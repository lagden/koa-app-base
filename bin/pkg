#!/usr/bin/env node

'use strict'

const {resolve} = require('path')
const {createWriteStream} = require('fs')
const {promisify} = require('util')
const https = require('https')
const child_process = require('child_process')

https.get[promisify.custom] = options => {
	return new Promise((resolve, reject) => {
		https
			.get(options, response => {
				response.end = new Promise(resolve => response.on('end', resolve))
				resolve(response)
			})
			.on('error', reject)
	})
}

const exec = promisify(child_process.exec)
// const get = promisify(https.get)
const packageFile = resolve(process.cwd(), 'package.json')
const packageJson = require(packageFile)
const {
	dependencies,
	devDependencies
} = packageJson
let cc = 0

// function getLatestVersionPackage(data, prop) {
// 	const keys = Object.keys(data)
// 	return Promise.allSettled(keys.map(async name => {
// 		const url = `https://registry.npmjs.org/-/package/${name}/dist-tags`
// 		const response = await get(url)
// 		let result = ''
// 		for await (const chunk of response) {
// 			result += chunk
// 		}

// 		try {
// 			const {latest: version} = JSON.parse(result)
// 			if (version && data[name] !== version) {
// 				cc++
// 				process.stdout.write(`${name} --> ${version}\n`)
// 				packageJson[prop][name] = version
// 				return {name, version}
// 			}
// 		} catch {
// 			// :(
// 		}

// 		return Promise.reject()
// 	}))
// }

function getLatestVersionPackage(data, prop) {
	const keys = Object.keys(data)
	return Promise.allSettled(keys.map(async name => {
		const cmd = `npm show ${name} version`
		let {stdout: version} = await exec(cmd)
		version = String(version).replace('\n', '')
		if (version && data[name] !== String(version)) {
			cc++
			process.stdout.write(`${name} --> ${version}\n`)
			packageJson[prop][name] = version
			return {name, version}
		}
		return Promise.reject()
	}))
}

Promise.all([
	getLatestVersionPackage(dependencies, 'dependencies'),
	getLatestVersionPackage(devDependencies, 'devDependencies')
])
	.then(() => {
		createWriteStream(packageFile)
			.on('finish', () => {
				process.stdout.write(cc > 0 ? 'All writes are now complete.' : 'No updates')
			})
			.on('close', () => {
				process.exit(0)
			})
			.end(JSON.stringify(packageJson, undefined, '  '))
	})
	.catch(error => {
		process.stderr.write(error.message)
		process.exit(1)
	})
